# Example of connecting Anthropic Claude model via LiteLLM integration
# This configuration works with the unified LiteLLM interface
{
    "AgentConfig": {
        "agent_name": "OmniAgent",
        "max_steps": 15,
        "tool_call_timeout": 30,
        "request_limit": 5000,  
        "total_tokens_limit": 40000000,

        # --- Memory Retrieval Config ---
        "memory_config": {
            "mode": "sliding_window",
            "value": 100
        },
        "memory_results_limit": 5,
        "memory_similarity_threshold": 0.5,

        # --- Tool Retrieval Config ---
        "enable_tools_knowledge_base": false,
        "tools_results_limit": 10,
        "tools_similarity_threshold": 0.1
    },
    "LLM": {
        "provider": "anthropic",
        "model": "claude-3-5-sonnet-20241022",
        "temperature": 0.7,
        "max_tokens": 4000,
        "max_context_length": 200000,
        "top_p": 0.95
    },
    "mcpServers": {
        "yahoo-finance": {"command": "uvx", "args": ["mcp-yahoo-finance"]},
        "ev_assistant": {
            "transport_type": "streamable_http",
            "url": "https://gitmcp.io/evalstate/mcp-webcam/mcp"
        }
    }
}


# Example of connecting Azure OpenAI model via LiteLLM integration
{
    "AgentConfig": {
        "agent_name": "OmniAgent",
        "max_steps": 15,
        "tool_call_timeout": 30,
        "request_limit": 5000,  
        "total_tokens_limit": 40000000,

        "memory_config": {
            "mode": "sliding_window",
            "value": 100
        },
        "memory_results_limit": 5,
        "memory_similarity_threshold": 0.5,

        "enable_tools_knowledge_base": false,
        "tools_results_limit": 10,
        "tools_similarity_threshold": 0.1
    },
    "LLM": {
        "provider": "azureopenai",
        "model": "gpt-4o",
        "temperature": 0.7,
        "max_tokens": 2000,
        "top_p": 0.95,
        "azure_endpoint": "https://[name].openai.azure.com",
        "azure_api_version": "2024-02-01",
        "azure_deployment": "[deployment name]",
        "max_context_length": 100000
    },
    "mcpServers": {
        "yahoo-finance": {"command": "uvx", "args": ["mcp-yahoo-finance"]},
        "ev_assistant": {
            "transport_type": "streamable_http",
            "url": "https://gitmcp.io/evalstate/mcp-webcam/mcp"
        }
    }
}


# Example of connecting Groq model via LiteLLM integration
{
    "AgentConfig": {
        "agent_name": "OmniAgent",
        "max_steps": 15,
        "tool_call_timeout": 30,
        "request_limit": 5000,  
        "total_tokens_limit": 40000000,

        "memory_config": {
            "mode": "sliding_window",
            "value": 100
        },
        "memory_results_limit": 5,
        "memory_similarity_threshold": 0.5,

        "enable_tools_knowledge_base": false,
        "tools_results_limit": 10,
        "tools_similarity_threshold": 0.1
    },
    "LLM": {
        "provider": "groq",
        "model": "llama-3.1-8b-instant",
        "temperature": 0.5,
        "max_tokens": 2000,
        "max_context_length": 8000,
        "top_p": 0.9
    },
    "mcpServers": {
        "yahoo-finance": {"command": "uvx", "args": ["mcp-yahoo-finance"]},
        "ev_assistant": {
            "transport_type": "streamable_http",
            "url": "https://gitmcp.io/evalstate/mcp-webcam/mcp"
        }
    }
}


# Example of connecting Ollama local model via LiteLLM integration
{
    "AgentConfig": {
        "agent_name": "OmniAgent",
        "max_steps": 15,
        "tool_call_timeout": 30,
        "request_limit": 5000,  
        "total_tokens_limit": 40000000,

        "memory_config": {
            "mode": "sliding_window",
            "value": 100
        },
        "memory_results_limit": 5,
        "memory_similarity_threshold": 0.5,

        "enable_tools_knowledge_base": false,
        "tools_results_limit": 10,
        "tools_similarity_threshold": 0.1
    },
    "LLM": {
        "provider": "ollama",
        "model": "qwen2.5:3b",
        "ollama_host": "http://ollama_host:ollama_port",
        "temperature": 0.5,
        "max_tokens": 5000,
        "max_context_length": 100000,
        "top_p": 0.7,
        "top_k": "N/A"
    },
    "mcpServers": {
        "yahoo-finance": {"command": "uvx", "args": ["mcp-yahoo-finance"]},
        "ev_assistant": {
            "transport_type": "streamable_http",
            "url": "https://gitmcp.io/evalstate/mcp-webcam/mcp"
        }
    }
}
